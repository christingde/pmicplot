#!/usr/bin/python
# -*- coding: utf-8 -*-

import re
import sys
import ConfigParser
import pandas as pd
import matplotlib.pyplot as plt
import commands
from subprocess import Popen, PIPE
import ntpath
import optparse


class Tools():
    def __init__(self):
        pass

    @staticmethod
    def shell(cmd):
        p = Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
        out, err = p.communicate()
        return p.returncode,out,err


class PmicPlot():
    def __init__(self, config_file):
        self.config = ConfigParser.RawConfigParser()
        self.config.read(config_file)
        self.tgt_data_file = self.config.get('Target', 'DataFile')
        self.left_plots = self.config.get('LeftPlot', 'Nodes').split()
        self.left_plots_factor = self.config.get('LeftPlot', 'ScaleFactor').split()
        self.right_plot = self.config.get('RightPlot', 'Nodes').strip();

    def get_tgt_nodes(self, cmd):
        print cmd
        rc = Tools.shell(cmd)
        if rc[0] != 0:
            print('Please connect your target device.')
            return
        meaningful_lines = re.sub('(?m)^l.*?\n|(?m)^d.*?\n|(?m).*?uevent.*?\n', '', rc[1]).strip().split('\n')
        meaningful_names = ''
        for line in meaningful_lines:
            meaningful_names = meaningful_names + line.split()[-1] + ' '
        return meaningful_names

    def gen_tgt_scpt(self):
        contents = ''
        tgt_batt_nodes = self.get_tgt_nodes('adb shell ls -l /sys/class/power_supply/battery/')
        if not tgt_batt_nodes:
            return
        contents = '"' + tgt_batt_nodes + '"\n'
        rc, tgt_hw_dirs, unused  = Tools.shell('adb shell ls "/sys/class/hwmon/hwmon*/device"')
        if not re.search('No such file or directory', tgt_hw_dirs):
            tgt_hw_dirs_var = 'hw_dirs="' + tgt_hw_dirs.replace('\r\n', ' ').strip() + '"'
            contents = contents + tgt_hw_dirs_var
            print contents
            for idx, item in enumerate(tgt_hw_dirs.split()):
                print idx, self.get_tgt_nodes('adb shell ls -l ' + item + '/')
        with open('.target.sh', 'r') as tgt_tmp_file:
            contents = contents + tgt_tmp_file.read()
            with open ('target.sh', 'w') as tgt_final_file:
                tgt_final_file.write(contents)

    def preprocess(self):
        with open(ntpath.basename(self.tgt_data_file), "r") as sources:
            lines = sources.readlines()
        with open(ntpath.basename(self.tgt_data_file), "w") as sources:
            for line in lines:
                sources.write(re.sub(r'Result:', '', line))
        with open(ntpath.basename(self.tgt_data_file), "r") as sources:
            lines = sources.readlines()
        with open(ntpath.basename(self.tgt_data_file), "w") as sources:
            for line in lines:
                sources.write(re.sub(r' Raw:[0-9a-f]*', '', line))

    def plot_pmic(self):
        fig = plt.figure()
        ax_one = fig.add_subplot(111)
        pmic_pd = pd.read_csv(ntpath.basename(self.tgt_data_file))
        for idx, pmic_node in enumerate(self.left_plots):
            ax_one.plot(pmic_pd[pmic_node] * int(self.left_plots_factor[idx]), label=pmic_node)
        ax_two = ax_one.twinx()
        ax_two.plot(pmic_pd[self.right_plot], label=self.right_plot, linewidth=2, color='#B22222')
        lines, labels = ax_one.get_legend_handles_labels()
        lines2, labels2 = ax_two.get_legend_handles_labels()
        ax_two.legend(lines + lines2, labels + labels2,loc='upper center', bbox_to_anchor=(0.5, 1.05),
                      ncol=5, fancybox=True, shadow=True)
        num_lines = sum(1 for line in open(ntpath.basename(self.tgt_data_file)))
        ax_two.set_xlim(0, num_lines)
        ax_two.set_ylim(0, 105)
        plt.ylabel(r'[capacity (%)]')
        plt.show()

    def get_data(self):
        Tools.shell('adb pull ' +  self.tgt_data_file)
        self.preprocess()


def main():
    parser = optparse.OptionParser()
    parser.add_option('-c', '--config',   action="store_true", dest="c",
                      help="read config and generate script for target device")
    parser.add_option('-g', '--get-data', action="store_true", dest="g",
                      help="get data from the target device, "
                           "make sure the adb works good and target device connected")
    parser.add_option('-p', '--plot',     action="store_true", dest="p",
                      help="draw a plot based on the data get from target device")
    options, args = parser.parse_args()
    pm = PmicPlot('config.ini')
    if  not (options.c or options.g or options.p):
        parser.print_help()
        sys.exit(1)
    if options.c:
        pm.gen_tgt_scpt()
        return
    if options.g:
        pm.get_data()
    if options.p:
        pm.preprocess()
        pm.plot_pmic()

if __name__ == "__main__":
    main()
